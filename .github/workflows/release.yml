name: New Release

# on:
#   workflow_dispatch:

on:
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      apk_path: ${{ steps.build.outputs.apk_path }}
      bundle_path: ${{ steps.build.outputs.bundle_path }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"

      - name: Install dependencies
        run: flutter pub get

      - name: Build APK
        id: build-apk
        run: |
          flutter build apk --release
          echo "apk_path=build/app/outputs/flutter-apk/app-release.apk" >> $GITHUB_OUTPUT

      - name: Upload APK to GitHub Release
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: ${{ steps.build.outputs.apk_path }}

      - name: Build App Bundle
        id: build-bundle
        run: |
          flutter build appbundle --release
          echo "bundle_path=build/app/outputs/bundle/release/app-release.aab" >> $GITHUB_OUTPUT

      - name: Upload Bundle to GitHub Release
        uses: actions/upload-artifact@v4
        with:
          name: release-bundle
          path: ${{ steps.build.outputs.bundle_path }}

  new-github-release:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.build.outputs.version }}
    steps:
      - name: Get app version
        id: get-app-version
        run: |
          version=$(cat pubspec.yaml | grep 'version:' | sed 's/.*version: //')
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Download APK
        uses: actions/download-artifact@v4
        with:
          name: release-apk

      - name: Download Bundle
        uses: actions/download-artifact@v4
        with:
          name: release-bundle

      - name: Create a new GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # tag_name: v$version
          release_name: Flutter Scanner v$version
          body: "Release v$version"
          draft: false
          prerelease: false
          tag_name: ${{ github.ref }}

      # - name: Upload artifacts to GitHub Release
      #   uses: softprops/action-gh-release@v2
      #   if: startsWith(github.ref, 'refs/tags/')
#   publish-apk:
#     needs: build-apk
#     runs-on: ubuntu-latest

#     steps:
#       - name: Download APK
#         uses: actions/download-artifact@v3
#         with:
#           name: release-apk

#       - name: Setup Play Store
#         uses: r0adkll/upload-google-play@v1
#         with:
#           serviceAccountJson: ${{ secrets.PLAYSTORE_SERVICE_ACCOUNT }}
#           packageName: com.example.flutter_detect # Replace with your actual package name
#           releaseFiles: app-release.apk
#           track: internal # Using internal track for APK
#           status: completed

#   publish-bundle:
#     needs: build-bundle
#     runs-on: ubuntu-latest

#     steps:
#       - name: Download Bundle
#         uses: actions/download-artifact@v3
#         with:
#           name: release-bundle

#       - name: Setup Play Store
#         uses: r0adkll/upload-google-play@v1
#         with:
#           serviceAccountJson: ${{ secrets.PLAYSTORE_SERVICE_ACCOUNT }}
#           packageName: com.example.flutter_detect # Replace with your actual package name
#           releaseFiles: app-release.aab
#           track: production
#           status: completed
